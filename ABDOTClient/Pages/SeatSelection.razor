@page "/seatselection"
@using ABDOTClient.Model
@using ABDOTClient.Data
@namespace SeatSelectionComponent
@inject IPlayService PlayService
@inject IHallService HallService
@inject ITicketService TicketService

<style>
  .seat {
    background-color: #444451;
    height: 1.5rem;
    width: 1.875rem;
    margin: 3px;
    border-top-left-radius: 10px;
    border-top-right-radius: 10px;
  }
  
  .seat.selected {
    background-color: #f66f6f;
  }
  
  .seat.occupied {
    background-color: #fff;
  }
  
  .seat:nth-of-type(2) {
    margin-right: 18px;
  }
  
  .seat:nth-last-of-type(2) {
    margin-left: 18px;
  }
  
  .seat:not(.occupied):hover {
    cursor: pointer;
    transform: scale(1.2);
  }
  
  .showcase .seat:not(.occupied):hover {
    cursor: default;
    transform: scale(1);
  }
  
  .showcase {
    background: rgba(0, 0, 0, 0.1);
    padding: 5px 10px;
    border-radius: 5px;
    color: #777;
    list-style-type: none;
    display: flex;
    justify-content: space-between;
  }
  
  .showcase li {
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0 10px;
  }
  
  .showcase li small {
    margin-left: 2px;
  }
  .seat-container{
    display: flex;
    align-content: center;
    justify-content: center;
  }
  
  
  .screen {
    background-color: #fff;
    height: 70px;
    width: 100%;
    margin: 15px 0;
    transform: rotateX(-45deg);
    box-shadow: 0 3px 10px rgba(255, 255, 255, 0.7);
    
  }
</style>
<ul class="showcase">
    <li>
        <div class="seat"></div>
        <small>Available</small>
    </li>
    <li>
        <div class="seat selected"></div>
        <small>Selected</small>
    </li>
    <li>
        <div class="seat occupied"></div>
        <small>Occupied</small>
    </li>
</ul>

<div class="container" style="perspective: 1000px">

    <div class="screen"></div>

    <div class="seat-container">
        <div class="row-container:DDD">
            @if (occupied != null) {
                @for (int i = 1; i <= 6; i++)
                {
                    Console.WriteLine("i" + i);
                    int tempI = i;
                    <div class="row">
                        @for (int j = 1; j <= 8; j++)
                        {
                            Console.WriteLine("j" + j);
                            int tempJ = j;
                            Tuple<int, int> thisSeat = new Tuple<int, int>(tempI, tempJ);

                            if (occupied.Contains(thisSeat))
                            {
                                <div class="seat occupied"  @onclick="() => SelectSeat(thisSeat)"></div> 
                            }
                            else if (selected.Contains(thisSeat))
                            {
                                <div class="seat selected"  @onclick="() => SelectSeat(thisSeat)"></div>  
                            }
                            else
                            {
                                <div class="seat"  @onclick="() => SelectSeat(thisSeat)"></div>
                            }
                        }
                    </div>
  
                }
            }
        </div>
    </div>

</div>


@code {
    [Parameter]
    public EventCallback<Tuple<int, int>> OnClick { get; set; }
    [CascadingParameter]
    int playId { get; set; }
    
    private Hall hall;
    private Play play;
    private IList<Ticket> ticketsAll;
    private IList<Ticket> ticketsOfThisPlay;

    int rows { get; set; }
    int columns { get; set; }
    private bool IsSelected { get; set; } = false;
    private IList<Tuple<int, int>> occupied;
    private IList<Tuple<int, int>> selected;
    
    protected override async Task OnInitializedAsync()
    {

        play = new Play();
        play = await PlayService.GetAsync(playId);
        hall = new Hall();
        hall = await HallService.GetHall(play.Hall.Id);
        hall.Seats = new List<Tuple<int, int>>();
        hall.LoadSeats();
        occupied = new List<Tuple<int,int>>();
        selected = new List<Tuple<int,int>>();
        ticketsOfThisPlay = new List<Ticket>();
        ticketsOfThisPlay = play.Tickets;
        Console.WriteLine(ticketsOfThisPlay);
        foreach (Ticket ticket in ticketsOfThisPlay) {
            occupied.Add(new Tuple<int, int>(ticket.Row,ticket.Column));
        }
    }
    private void ChangeColor(Tuple<int, int> seat)
    {
        
    }
    void SelectSeat(Tuple<int, int> seat)
    {
        if (selected.Contains(seat))
        {
            selected.Remove(seat);
            OnClick.InvokeAsync(seat);
        }
        else
        {
            foreach (Tuple<int,int> seatInOccupied in occupied)
            {
                Console.WriteLine(seatInOccupied);
            }
            Console.WriteLine("Selected seat: " + seat);
            if (!occupied.Contains(seat))
            {
                selected.Add(seat);
                OnClick.InvokeAsync(seat);
            }
        }
        ChangeColor(seat);
    }





}