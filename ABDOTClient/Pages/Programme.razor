@page "/"
@using ABDOTClient.Data
@using ABDOTClient.Model
@namespace Programme
@inject IBranchService BranchService
@inject IPlayService PlayService
@inject NavigationManager NavigationManager
@using HCarouselComponent


<style>
    body {
        padding-top: 40px;
    }
    .carousel-slide-custom{
        background-size: contain;
        position: relative;
        
    }
    .carousel-inner{
        
    }
    .carousel-caption-custom{
        position: absolute;
        right:15%;
        bottom:20px;
        left:15%;
        z-index:10;
        padding-top:20px;
        padding-bottom:20px;
        color:#fff;
        text-align:center;
    }
    .carousel-img{
        width: 100%;
        height: auto;
        overflow: hidden;
        object-fit: cover;
        max-height: 550px;
        border-radius: 10px;
        
    }
    
   
    
</style>

<Carousel/>
<div class="section" >
    <div class="container">
        <h1 id="programme-header-now" class="">playing now</h1>
        <div class="program row">
            <div class="date-list col-sm-8 hidden-xs-down">
                <div class="row"> <!-- basically a week through -->
                    @for(int i=0;i<=7;i++)
                    {
                        var tempint = i;
                        <div class="col-sm-6 col-md-4 col-lg-3">
                            <a class="date-list-link btn btn--black btn--outline-white btn--small btn--full btn--hover date-list-active"
                               @onclick="()=>FilterByDay(DateTime.Today.Date.AddDays(tempint))">@today.AddDays(tempint).ToString(dateFormat)</a>
                        </div>
                    }
                </div>
            </div>
            <div class="col-sm-4">
                <div>
                    <select class="header-selectpicker" value="@selectedBranch" @onchange="@FilterByBranch">
                        @foreach (var branch in branches)
                        {
                            <option>@branch.City</option>
                        }
                    </select>
                </div>
            </div>
        </div>
        <div class="section row">
            @if(playsToShow !=null || !playsToShow.Any()){
            @foreach (var play in playsToShow)
            {
                <div class="col-md-3 col-sm-6 col-xl-3 movie-list-item" @onclick="@(() => GoToMovie(play.Id))">
                    <div class="movie-list">
                        <div class="movie-list-poster movie-list-upcoming "><img src=@play.Movie.PosterSrc/>
                        </div>
                        <div class="movie-list-top-content">
                            <h4 class="movie-list-title">@play.Movie.Title</h4>
                            <div>
                                <h5 class="section-label">Director</h5>
                                <p>@play.Movie.Director</p>
                                <h5 class="section-label">Genre</h5>
                                <p>@play.Movie.Genre</p>
                            </div>
                        </div>
                        <div class="movie-list-bottom-content">
                            <div>
                                <p class="section-label">Premiere</p>
                                <p class="movie-list-date">@play.Movie.Year</p>
                            </div>
                        </div>
                    </div>
                    @play.Date
                                    @* @play.Hall.Branch.City *@
                </div>
                
            }
            }
        </div>
    </div>
    @selectedBranch
    @selectedDay.ToString(dateFormat);
</div>

@code{
    private DateTime today { get; set; } = DateTime.Today.Date;
    private string dateFormat = "dddd, dd/MM";
    
    private string selectedBranch;
    private DateTime selectedDay;
    
    private IList<Branch> branches = new List<Branch>();
    
    private IList<Play> plays = new List<Play>();
    private IList<Play> playsToShow = new List<Play>();
    
    
    
    protected override async Task OnInitializedAsync() {
        playsToShow = new List<Play>();
        branches = await BranchService.GetAllBranches();
        plays = await PlayService.GetAllAsync();
        playsToShow = plays;
        ExecuteFilter();
    }
    private void FilterByDay(DateTime dateTime)
    {
        selectedDay = dateTime;
        ExecuteFilter();
    }

    private void FilterByBranch(ChangeEventArgs args)
    {
        selectedBranch = args.Value.ToString();
        ExecuteFilter();
    }

    private void ExecuteFilter()
    {
        // playsToShow = plays.Where(p =>
        //     (selectedBranch.Equals(p.Hall.Branch.City)) &&
        //     selectedDay.Equals(p.Date)
        //     ).ToList();
    }
    

    private void GoToMovie(int id)
    {
        NavigationManager.NavigateTo($"movie/{id}");
    }

    

}