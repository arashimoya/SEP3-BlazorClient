@page "/login"
@using ABDOTClient.Authentication
@namespace LoginComponent

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager


<AuthorizeView>
    <NotAuthorized>
        <h3>Login</h3>
        <div class="form-group">
            <p>@confirmationMessage</p>
            <input type="text" placeholder="e-mail" @bind-value="email"/>
        </div>
        <div class="form-group">
            <input type="password" placeholder="password" @bind-value="password"/>
        </div>
        <div style="color:red">@errorMessage</div>
        <p class="actions">
            <button class="btn-outline-dark" @onclick="PerformLogin">Login</button>
            <button class="btn-outline-dark" @onclick="Cancel">Cancel</button>
        </p>
    </NotAuthorized>
    <Authorized>
        <div>
            Hello 
        </div>
        <p class="actions">
        <button class="btn-outline-dark" @onclick="GoToProfilePage">My Profile</button>
        </p>
        <p class="actions">
            <button class="btn-outline-dark" @onclick="PerformLogout">Log out</button>
        </p>
        
    </Authorized>
</AuthorizeView>

@code {
    private string email;
    private string password;
    private string confirmationMessage;
    private string errorMessage;
    private string name;
    private int Id;
    
    public async Task Cancel()
    {
        NavigationManager.NavigateTo("/");
    }

    public async Task PerformLogin()
    {
        errorMessage = " ";
        Console.WriteLine("logging in");
        
            var returnedUser = await ((CustomAuthenticationStateProvider) AuthenticationStateProvider).ValidateLogin(email, password);
            email = "";
            password = "";
            
            
            Console.WriteLine("Success");
        
        
    }

    public async Task PerformLogout()
    {
        errorMessage = "";
        confirmationMessage = "";
        email = "";
        try
        {
            await ((CustomAuthenticationStateProvider) AuthenticationStateProvider).Logout();
            NavigationManager.NavigateTo("/");
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }
        
    }

    public void GoToProfilePage()
    {
        NavigationManager.NavigateTo($"/profile/{Id}");
    }
    
    
}