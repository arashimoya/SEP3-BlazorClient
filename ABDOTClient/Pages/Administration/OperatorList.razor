@page "/personel/{confirmationMessage}"
@namespace ABDOTClient.Pages.Administration
@inject NavigationManager NavigationManager
@inject IEmployeeService EmployeeService
@using ABDOTClient.Model
@using Data
@using ABDOTClient.Factories
@using GraphQL.Client.Abstractions.Utilities

@attribute [Authorize(Policy = "MustBeManager")]

<style>
    html, body {
        background-color: white;
        color: black;
    }
    .confirmation-message{
        color: greenyellow;
    }
</style>
<p class="confirmation-message">@confirmationMessage</p>
@if (personelToShow == null)
{
    <p>
        <em>Loading...</em>
    </p>
} else if (!personelToShow.Any()){
    <p>
        <em>No Person items exist. Please add some</em>
    </p>
    
        <div class="row">
            <div class="col-sm-4" @onclick="@(()=> NavigationManager.NavigateTo("/addpersonel"))"><button>
                    <i class="oi oi-plus"/>
                </button>
            </div>
        </div>
    
}
else
{
    <div class="container" style="background-color: white">
        <div class="section-separate" style="padding-top:40px">
            <button style="border-color: transparent; background-color:transparent">
            <i class="oi oi-arrow-left" @onclick="@(()=>NavigationManager.NavigateTo("/admin"))"/>
            </button>
        </div>
    <h3 style="color:black">Personel</h3>
        
        
            <div class="row">
                <div class="col-sm-4" @onclick="@(()=> NavigationManager.NavigateTo("/addpersonel"))"><button>
                        <i class="oi oi-plus"/>
                    </button>
                </div>
            </div>
        
    <table class="table" style="color:black; border-color: black">
        <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Email</th>
            <th>Role</th>
            <th>Branch</th>
            <th>CPR</th>
            <th>Birthday</th>
            
                <th>Remove</th>
                <th>Edit</th>
            
            
        </tr>
        </thead>
        <tbody>
        @foreach (var item in personelToShow)
        {
            <tr>
                <td>@item.Id</td>
                <td>@item.FirstName<span> </span> @item.LastName</td>
                <td>@item.Email</td>
                <td>@item.Role</td>
                <td>@item.Branch.City</td>
                <td>@item.CPR</td>
                <td>@item.Birthday</td>
                
               
                    <td>
                        @if (item.Role != 1) {
                            <button @onclick="@(() => RemoveEmployee(item.Id))">
                                <i class="oi oi-trash" style="color:red"/>
                            </button>
                        }
                    </td>
                    <td>
                        @if (item.Role != 1) {
                            <button @onclick="@(() => Edit(item.Id))">
                                <i class="oi oi-pencil" style="color:blue"/>
                            </button>
                        }
                    </td>
                    
                
                
            </tr>
        }
        </tbody>
    </table>
    </div>
}
@code {
    [Parameter] public string confirmationMessage { get; set; }
    private IList<Employee> personel;
    private IList<Employee> personelToShow;


    protected override async Task OnInitializedAsync()
    {
        personel = new List<Employee>();
        personel = await EmployeeService.GetAllEmployees();
        personelToShow = personel;
        if (!confirmationMessage.ToLowerCase().Contains("success") || !confirmationMessage.ToLowerCase().Contains("fail")) {
            confirmationMessage = " ";
        }
    }
    private async Task RemoveEmployee(int employeeId) {
        Employee toRemove = personel.FirstOrDefault(e => e.Id == employeeId);
        if (toRemove != null) {
            if (await EmployeeService.DeleteEmployee(employeeId)) {
                personel.Remove(toRemove);
                personelToShow.Remove(toRemove);
                confirmationMessage = "Employee deleted successfully";
            }else {
                confirmationMessage = "Failed to delete operator";
            }
        }
    }

    private void Edit(int id)
    {
        NavigationManager.NavigateTo($"EditEmployee/{id}");
    }
    

}