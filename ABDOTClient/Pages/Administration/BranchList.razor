@page "/branches/{confirmationMessage}"
@using ABDOTClient.Model
@using ABDOTClient.Data
@using GraphQL.Client.Abstractions.Utilities
@inject NavigationManager NavigationManager
@attribute [Authorize(Policy = "MustBeOwner")]
<style>
    html, body {
        background-color: white;
        color: black;
    }
    .confirmation-message{
        color: greenyellow;
    }
</style>
<p class="confirmation-message">@confirmationMessage</p>
@if (branchesToShow == null)
{
    <p>
        <em>Loading...</em>
    </p>
} else if (!branchesToShow.Any()){
    <p>
        <em>No Branch items exist. Please add some</em>
    </p>
    <AuthorizeView Policy="MustBeOwner">
        <div class="col-sm-4" @onclick="@(()=> NavigationManager.NavigateTo("/Addbranch"))"><button>
                <i class="oi oi-plus"/>
            </button>
        </div>
    </AuthorizeView>
}
else
{
    <div class="container" style="background-color: white">
        <div class="section-separate" style="padding-top:40px">
            <button style="border-color: transparent; background-color:transparent">
            <i class="oi oi-arrow-left" @onclick="@(()=>NavigationManager.NavigateTo("/admin"))"/>
            </button>
        </div>
    <h3 style="color:black">Branches</h3>
        
        <AuthorizeView Policy="MustBeOwner">
            <div class="row">
                <div class="col-sm-4" @onclick="@(()=> NavigationManager.NavigateTo("/addbranch"))"><button>
                        <i class="oi oi-plus"/>
                    </button>
                </div>
            </div>
        </AuthorizeView>
    <table class="table" style="color:black; border-color: black">
        <thead>
        <tr>
            <th>ID</th>
            <th>City</th>
            <th>Halls</th>
            <AuthorizeView Policy="MustBeOwner">
                <th>Remove</th>
                <th>Edit</th>
            </AuthorizeView>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in branchesToShow)
        {
            <tr>
                <td>@item.Id</td>
                <td>@item.City</td>
                <td>
                    <button @onclick="@(() => GoToBranch(item.Id))">
                        <i class="oi oi-eye" style="color:blue"/>
                    </button>
                </td>
                <AuthorizeView Policy="MustBeOwner">
                    <td>
                        <button @onclick="@(() => RemoveBranch(item.Id))">
                            <i class="oi oi-trash" style="color:red"/>
                        </button>
                    </td>
                <td>
                    <button @onclick="@(() => Edit(item.Id))">
                        <i class="oi oi-pencil" style="color:blue"/>
                    </button>
                </td>
                </AuthorizeView>
                
            </tr>
        }
        </tbody>
    </table>
    </div>
}
@code {
    private IList<Branch> branches;
    private IList<Branch> branchesToShow;
    private IBranchService BranchService = new BranchCloudService();
    [Parameter] public string confirmationMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        
        branches = new List<Branch>();
        branches = await BranchService.GetAllBranches();
        branchesToShow = branches;
        if (!confirmationMessage.ToLowerCase().Contains("success") || !confirmationMessage.ToLowerCase().Contains("fail")) {
            confirmationMessage = " ";
        }
    }

    private async Task RemoveBranch(long branchId) {
        Branch toRemove = branches.FirstOrDefault(b => b.Id == branchId);
        if (toRemove != null) {
            if (await BranchService.DeleteBranch(branchId))
            {
                branchesToShow.Remove(toRemove);
                branches.Remove(toRemove);
                confirmationMessage = "Branch deleted successfully";
            }
            else {
                confirmationMessage = "Failed to delete branch";
            }
        }

    }

    private void Edit(int id)
    {
        NavigationManager.NavigateTo($"EditBranch/{id}");
    }

    private void GoToBranch(int id) {
        NavigationManager.NavigateTo($"/HallList/{confirmationMessage}/{id}");
    }

    

}