@page "/EditHall/{Id:int}"
@using Microsoft.AspNetCore.Components
@using ABDOTClient.Model
@using ABDOTClient.Data
@inject NavigationManager NavigationManager
@inject IHallService HallService
@inject IBranchService BranchService;
<div class="container">
<h3>AddHall</h3>
    <EditForm Model="@HallToEdit" OnValidSubmit="@EditAHall">
        <DataAnnotationsValidator/>
        <ValidationSummary/>
        <div class="form-group">
            <InputNumber @bind-Value="HallToEdit.Id" class="disabled"/>
        </div>
        <div class="form-group">
                Branch:<br/>
                <InputSelect @bind-Value="@selectedBranchId">
                    @foreach (var branch in branches) {
                        <option value="@branch.Id">@branch.City</option>
                    }
                </InputSelect>
            </div>
        <div class="form-group">
            Hall Size:<br/>
            <InputSelect @bind-Value="HallToEdit.HallSize">
                <option value="1">6x8</option>
                <option value="2">12x14</option>
                <option value="3">15x20</option>
            </InputSelect>
        </div>
        
        <p class="actions">
                <button class="btn btn-dark" type="submit">Submit</button>
            </p>
    </EditForm>
</div>

@code {
    [Parameter]public int Id { get; set; }
    private Hall HallToEdit = new Hall(1);
    private IList<Branch> branches = new List<Branch>();
    private string confirmationMessage = "";

    private int selectedBranchId {
        get => HallToEdit.Branch.Id;
        set => HallToEdit.Branch = branches.Single(b => b.Id == value);
    }
    private async Task EditAHall() {
        Hall hallToCreate = new Hall(HallToEdit.HallSize);
        hallToCreate.Branch = HallToEdit.Branch;
        hallToCreate.Id = HallToEdit.Id;
        Hall returnedHall = await HallService.EditHall(hallToCreate);
        if (returnedHall != null) {
            confirmationMessage = "Hall updated successfully";
            NavigationManager.NavigateTo($"/HallList/{confirmationMessage}");
        }
    }

    protected override async Task OnInitializedAsync() {
        HallToEdit.Branch = new Branch();
        branches = await BranchService.GetAllBranches();
        HallToEdit = await HallService.GetHall(Id);
    }

}