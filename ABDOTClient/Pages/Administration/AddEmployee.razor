@page "/addpersonel"
@using ABDOTClient.Model
@using ABDOTClient.Data
@using ABDOTClient.Pages.Administration
@using Microsoft.AspNetCore.Components
@using SendGrid
@using SendGrid.Helpers.Mail
@inject NavigationManager NavigationManager
@inject IBranchService BranchService
@namespace AddEmployeeComponent
@attribute [Authorize(Policy = "MustBeManager")]

<style>
    html, body {
        background-color: white;
        color: black;
    }
</style>
<div class="container">
    <h3>Add new employee</h3>
    @if (branches == null || !branches.Any()) {
        <p>No branches exist. Please add some, it is a required attribute of an employee</p>
    }
    else {
        <EditForm Model="@newEmployeeItem" OnValidSubmit="@AddNewEmployee">
        <DataAnnotationsValidator/>
        <ValidationSummary/>
    <div class="form-group">
        First name:<br/>
        <InputText @bind-Value="newEmployeeItem.FirstName"/>
    </div>
        <div class="form-group">
            Last name:<br/>
            <InputText @bind-Value="newEmployeeItem.LastName"/>
        </div>
        <div class="form-group">
                Birthdate:<br/>
                <InputDate @bind-Value="today" @bind-Value:format="yyyy-MM-dd"/>
        </div>
    <div class="form-group">
        Password:<br/>
        <InputText @bind-Value="newEmployeeItem.Password"/>
    </div>
    <div class="form-group">
        Email:<br/>
        <InputText @bind-Value="newEmployeeItem.Email"/>
    </div>
    <div class="form-group">
        Street:<br/>
        <InputText @bind-Value="newEmployeeItem.Street"/>
    </div>
    <div class="form-group">
        Postcode:<br/>
        <InputText @bind-Value="newEmployeeItem.Postcode"/>
    </div>
        <div class="form-group">
            City:<br/>
            <InputText @bind-Value="newEmployeeItem.City"/>
        </div>
        <div class="form-group">
            Country:<br/>
            <InputText @bind-Value="newEmployeeItem.Country"/>
        </div>
        <div class="form-group">
            CPR Number:<br/>
            <InputText @bind-Value="newEmployeeItem.CPR"/>
        </div>
        <div class="form-group">
            Role:<br/>
            <CustomInputSelect @bind-Value="newEmployeeItem.Role">
                
                <option value="2">Manager</option>
                <option value="3">Operator</option>
            </CustomInputSelect>
        </div>
        <div class="form-group">
            Branch:<br/>
            <InputSelect @bind-Value="@selectedBranchId">
                @foreach (var branch in branches) {
                    <option value="@branch.Id">@branch.City</option>
                }
            </InputSelect>
        </div>
        
        <p class="actions">
                <button class="btn btn-dark" type="submit">Submit</button>
            </p>
    </EditForm>
    }
    
</div>
@code {
    private Employee newEmployeeItem = new Employee();
    private IEmployeeService employeeService = new EmployeeCloudService();
    private IList<Branch> branches = new List<Branch>();
    private string confirmationMessage = "";
    private DateTime today = DateTime.Today;
    private IList<Employee> employees;
    private string apiKey;

    private int selectedBranchId {
        get => newEmployeeItem.Branch.Id;
        set => newEmployeeItem.Branch = branches.Single(b => b.Id == value);
    }
    
    
    
    private async Task AddNewEmployee() {
        Console.WriteLine("We are in add new employee");
        newEmployeeItem.Birthday = today.Year + "-" + today.Month + "-" + today.Day;
        bool emailAlreadyExists = false;
        if (employees != null)
        {
            if (employees.Any())
            {
                foreach (Employee employee in employees)
                {
                    if (employee.Email.Equals(newEmployeeItem.Email))
                    {
                        emailAlreadyExists = true;
                    }
                }
            }
        }
        if (!emailAlreadyExists)
            {
                Employee returnedEmployee = await employeeService.CreateEmployee(newEmployeeItem);
                if (returnedEmployee != null && returnedEmployee.GetType() == typeof(Employee)) 
                {
                    var client = new SendGridClient(apiKey);
                    var from = new EmailAddress("horizonxxcinema@gmail.com", "HorizonXXCinema");
                    var subject = "Employment";
                    var to = new EmailAddress(returnedEmployee.Email, returnedEmployee.FirstName + " " + returnedEmployee.LastName);
                    var plainTextContent = "";
                    var htmlContent = $" <h2><b>Congratulations {returnedEmployee.FirstName}! </h2> </b> " +
                                      $"You have just been registered as an employee of HorizonXXCinema. <br><br>" +
                                      "Thank you for your cooperation and we are looking forward to working with you. If you have any more questions you are welcome to reply to this email and ask.<br><br>" +
                                      "Best regards <br><br>" +
                                      "<b>Oliver Sperlik</b> <br>" +
                                      "<b>Human Resources Manager - HorizonXXCinema<b>";
                    var msg = MailHelper.CreateSingleEmail(from, to, subject, plainTextContent, htmlContent);
                    var response = await client.SendEmailAsync(msg);
                    confirmationMessage = "Employee created successfully";
                    NavigationManager.NavigateTo($"/personel/{confirmationMessage}");
                } else {
                    confirmationMessage = "Failed to create employee";
                }
            }
            else
        {
            
                confirmationMessage = "Employee with this email already exists, fail";
                NavigationManager.NavigateTo($"/personel/{confirmationMessage}");
        }
        

     
    }
    protected override async Task OnInitializedAsync()
    {
        
        apiKey = Environment.GetEnvironmentVariable("EMAIL_API_KEY");
        if (apiKey == null)
        {
            Environment.SetEnvironmentVariable("EMAIL_API_KEY",
                "");
            apiKey = Environment.GetEnvironmentVariable("EMAIL_API_KEY");
        }
        
        employees = new List<Employee>();
        employees = await employeeService.GetAllEmployees();
        newEmployeeItem.Branch = new Branch();
        branches = await BranchService.GetAllBranches();
        newEmployeeItem.Branch = branches[0];

        newEmployeeItem.Birthday = today.Year + "-" + today.Month + "-" + today.Day;
    }

}