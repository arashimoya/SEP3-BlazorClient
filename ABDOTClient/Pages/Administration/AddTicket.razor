@page "/addTicket"
@using Microsoft.AspNetCore.Components
@using ABDOTClient.Model
@using ABDOTClient.Data
@inject IPlayService PlayService
@inject IBranchService BranchService
@inject IHallService HallService
@inject ITicketService TicketService
@inject NavigationManager NavigationManager
@using SeatSelectionComponent

<style>
    html, body {
        background-color: white;
        color: black;
    }
</style>
<div class="container">
<h3>Sell Ticket</h3>
    <EditForm Model="@newTicketItem" OnValidSubmit="@AddNewTicket">
        <DataAnnotationsValidator/>
        <ValidationSummary/>
        
        <div class="form-group">
            Branch: <br/>
                    
            <InputSelect @bind-Value="@SelectedBranchId" @onchange="FilterByBranch">
                @foreach (var branch in branches)
                {
                    <option value="@branch.Id">@branch.City</option>
                }
            </InputSelect>
        </div>
        
        <div class="form-group">
            Play: <br/>
            
                <InputSelect @bind-Value="@SelectedPlayId">
                    @foreach (var play in playsToShow)
                    {
                        <option value="@play.Id">@play.Movie.Title @play.Date</option>
                    }
                </InputSelect>
        </div>
        
        
        <p class="actions">
            <button class="btn btn-dark" type="submit">Submit</button>
        </p>
    </EditForm>
    @SelectedBranchId<br/>
    @SelectedPlayId
</div>

@code {
    private Ticket newTicketItem = new Ticket();
    private string confirmationMessage = " ";

    private IList<Play> plays = new List<Play>();
    private IList<Branch> branches = new List<Branch>();
    private IList<Play> playsToShow = new List<Play>();

    private int SelectedBranchId {
        get => newTicketItem.Play.Hall.Branch.Id;
        set => newTicketItem.Play.Hall.Branch = branches.Single(b => b.Id == value);
    }
    
    private int SelectedPlayId {
        get => newTicketItem.Play.Id;
        set => newTicketItem.Play = plays.Single(p => p.Id == value);
    }
    protected override async Task OnInitializedAsync() {
        newTicketItem.Play = new Play();
        newTicketItem.User = new User();
        newTicketItem.Play.Hall = new Hall();
        newTicketItem.Play.Movie = new Movie();
        newTicketItem.Play.Hall.Branch = new Branch();
        newTicketItem.Play.Tickets = new List<Ticket>();
        newTicketItem.Play.Hall.Seats = new List<Tuple<int, int>>();
        newTicketItem.Play.Hall.Programme = new List<Play>();
        newTicketItem.Employee = new Employee();

        branches = await BranchService.GetAllBranches();
        newTicketItem.Play.Hall.Branch = branches[0];
        plays = await PlayService.GetAllAsync();
        playsToShow = plays;
        ExecuteFilter();
    }

    private async Task AddNewTicket() {
        newTicketItem.Employee.Id = 1;
        newTicketItem.Column = 1;
        newTicketItem.Row = 1;
        newTicketItem.Play = plays[0];
        Ticket returnedTicket = await TicketService.AddTicket(newTicketItem);
        if (returnedTicket != null && returnedTicket.GetType() == typeof(Ticket)) {
            confirmationMessage = "New ticket added successfully";
            NavigationManager.NavigateTo($"/ticketlist/");
        }
    }
    private void FilterByBranch() {
        ExecuteFilter();
    }
    private void ExecuteFilter()
    {
    playsToShow = plays.Where(p =>
        (SelectedBranchId == p.Hall.Branch.Id) 
        ).ToList();
    }

}