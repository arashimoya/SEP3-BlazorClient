@page "/addTicket"
@using Microsoft.AspNetCore.Components
@using ABDOTClient.Model
@using ABDOTClient.Data
@inject IPlayService PlayService
@inject IBranchService BranchService
@inject IHallService HallService
@inject ITicketService TicketService
@inject NavigationManager NavigationManager
@using SeatSelectionComponent

<style>
    html, body {
        background-color: white;
        color: black;
    }
</style>
<div class="container">
<h3>Sell Ticket</h3>
    <EditForm Model="@newTicketItem" OnValidSubmit="@AddNewTicket">
        <DataAnnotationsValidator/>
        <ValidationSummary/>
        
        <div class="form-group">
            Branch: <br/>
                    
            <InputSelect @bind-Value="@SelectedBranchId" @onchange="FilterByBranch">
                @foreach (var branch in branches)
                {
                    <option value="@branch.Id">@branch.City</option>
                }
            </InputSelect>
        </div>
        
        <div class="form-group">
            Play: <br/>
            
            <InputSelect @bind-Value="@SelectedPlayId">
                @foreach (var play in playsToShow)
                {
                    <option value="@play.Id">@play.Movie.Title @play.Date</option>
                }
            </InputSelect>
        </div>
        <div class="form-group">
            Row: <br/>
            <InputSelect @bind-Value="@newTicketItem.Row">
                @foreach(var seat in SeatsAvailable) {
                    @foreach (var ticket in ticketsAll) {
                        @if (!(ticket.Row == seat.Item1 && ticket.Column == seat.Item2)) {
                            <option>R: @seat.Item1; C: @seat.Item2;</option>
                        }    
                    }
                    
                }
            </InputSelect>
        </div>
        <p class="actions">
            <button class="btn btn-dark" type="submit">Submit</button>
        </p>
    </EditForm>
    
    @foreach (var ticket in ticketsAll) {
        @ticket.Row <span>, </span> @ticket.Column<br/>
    }
</div>

@code {
    private Ticket newTicketItem = new Ticket();
    private string confirmationMessage = " ";

    private IList<Play> plays = new List<Play>();
    private IList<Branch> branches = new List<Branch>();
    private IList<Play> playsToShow = new List<Play>();
    private IList<Ticket> ticketsAll = new List<Ticket>();
    private IList<Tuple<int,int>> SeatsAvailable = new List<Tuple<int,int>>();

    private IList<Tuple<int, int>>  selectedSeats;
    private int SelectedBranchId {
        get => newTicketItem.Play.Hall.Branch.Id;
        set => newTicketItem.Play.Hall.Branch = branches.Single(b => b.Id == value);
    }
    
    private int SelectedPlayId {
        get => newTicketItem.Play.Id;
        set => newTicketItem.Play = plays.Single(p => p.Id == value);
    }
    protected override async Task OnInitializedAsync() {
        newTicketItem.Play = new Play();
        newTicketItem.Play.Hall = new Hall();
        newTicketItem.Play.Movie = new Movie();
        newTicketItem.Play.Hall.Branch = new Branch();
        newTicketItem.Play.Tickets = new List<Ticket>();
        newTicketItem.Play.Hall.Seats = new List<Tuple<int, int>>();
        newTicketItem.Play.Hall.Programme = new List<Play>();
        newTicketItem.Employee = new Employee();

        branches = await BranchService.GetAllBranches();
        newTicketItem.Play.Hall.Branch = branches[0];
        plays = await PlayService.GetAllAsync();

        ticketsAll = await TicketService.GetAllTickets();
        for (int i = 1; i <= 6; i++) {
            for (int j = 1; j <= 8; j++) {
                SeatsAvailable.Add(new Tuple<int, int>(i,j));
            }
        }
        
        foreach (var play in plays) {
            play.Hall = await HallService.GetHall(play.Hall.Id);
            play.Hall.Branch = await BranchService.GetBranch(play.Hall.Branch.Id);
        }
        playsToShow = plays;
        
        ExecutePlayFilter();
    }

    private async Task AddNewTicket() {
        newTicketItem.Employee.Id = 1;
        
        Ticket returnedTicket = await TicketService.AddTicket(newTicketItem);
        if (returnedTicket != null && returnedTicket.GetType() == typeof(Ticket)) {
            confirmationMessage = "New ticket added successfully";
            NavigationManager.NavigateTo($"/ticketlist/{confirmationMessage}");
        }
    }
    private void FilterByBranch() {
        ExecutePlayFilter();
    }
    private void ExecutePlayFilter()
    {
    playsToShow = plays.Where(p =>
        (SelectedBranchId == p.Hall.Branch.Id) 
        ).ToList();
    }

    private void ExecuteTicketFilter() {
        IList<Ticket> ticketsTaken = ticketsAll.Where(t =>
            (t.Play.Id == SelectedPlayId)).ToList();

    }
    

}