@page "/EditBranch/{Id:int}"
@using ABDOTClient.Model
@using ABDOTClient.Pages.Administration
@using Microsoft.AspNetCore.Components
@using ABDOTClient.Data
@inject NavigationManager NavigationManager
@inject IBranchService BranchService
@namespace EditBranchComponent
@attribute [Authorize(Policy = "MustBeOwner")]

<style>
    html, body {
        background-color: white;
        color: black;
    }
</style>
<div class="container">
    <h3>Edit Branch</h3>
    <EditForm Model="@newBranchItem" OnValidSubmit="@EditABranch">
        <DataAnnotationsValidator/>
        <ValidationSummary/>
    <div class="form-group">
                Street:<br/>
                <InputText @bind-Value="newBranchItem.Street"/>
            </div>
            <div class="form-group">
                Postcode:<br/>
                <InputText @bind-Value="newBranchItem.Postcode"/>
            </div>
            <div class="form-group">
                City:<br/>
                <InputText @bind-Value="newBranchItem.City"/>
            </div>
            <div class="form-group">
                Country:<br/>
                <InputText @bind-Value="newBranchItem.Country"/>
            </div>
            <p class="actions">
                <button class="btn btn-dark" type="submit">Submit</button>
            </p>
    </EditForm>
</div>
@code {
    [Parameter] public int Id { get; set; }
    private Branch newBranchItem = new Branch();
    private string confirmationMessage = "";
    

    protected override async Task OnInitializedAsync() {
        newBranchItem = await BranchService.GetBranch(Id);
    }
    
    
    private async Task EditABranch()
    {
        if (await BranchService.EditBranch(newBranchItem) !=null)
        {
            confirmationMessage = "Branch edited successfully";
            NavigationManager.NavigateTo($"/branches/{confirmationMessage}");
            
        }else {
            confirmationMessage = "Failed to edit branch";
        }
     
    }
    

}