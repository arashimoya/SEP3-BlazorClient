@page "/addmovie"
@using ABDOTClient.Model
@using ABDOTClient.Data
@using ABDOTClient.Pages.Administration
@inject NavigationManager NavigationManager
@namespace AddMovieComponent
@attribute [Authorize(Policy = "MustBeManager")]
<style>
    html, body {
        background-color: white;
        color: black;
    }
</style>
<h3>Add Movie</h3>
<EditForm Model="@newMovieItem" OnValidSubmit="@AddNewMovie">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
<div class="form-group">
    Title:<br/>
    <InputText @bind-Value="newMovieItem.Title"/>
</div>
<div class="form-group">
    Director:<br/>
    <InputText @bind-Value="newMovieItem.Director"/>
</div>
<div class="form-group">
    Description:<br/>
    <InputTextArea @bind-Value="newMovieItem.Description"/>
</div>
<div class="form-group">
    Genre:<br/>
    <InputText @bind-Value="newMovieItem.Genre"/>
</div>
    <div class="form-group">
        Language:<br/>
        <InputText @bind-Value="newMovieItem.Language"/>
    </div>
    <div class="form-group">
        SubtitleLanguage:<br/>
        <InputText @bind-Value="newMovieItem.SubtitleLanguage"/>
    </div>
<div class="form-group">
    Year of release:<br/>
    <InputNumber @bind-Value="newMovieItem.Year"/>
</div>
<div class="form-group">
    Length:<br/>
    <InputNumber @bind-Value="newMovieItem.LengthInMinutes"/>
</div>
    <p class="actions">
            <button  class="btn btn-dark" type="submit">Submit</button>
        </p>
</EditForm>
@code {
    private Movie newMovieItem = new Movie();
    private IMovieService CloudMovieService = new CloudMovieService();
    private string confirmationMessage = "";

    
    private async Task AddNewMovie()
    {
        if (await CloudMovieService.AddMovieAsync(newMovieItem) != null)
        {
            confirmationMessage = "Movie added successfully";
            NavigationManager.NavigateTo($"/movielist/{confirmationMessage}");
        }else {
            confirmationMessage = "Failed to create movie";
        }
    }
    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }

}